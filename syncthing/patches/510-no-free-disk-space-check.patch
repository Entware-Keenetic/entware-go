--- a/src/github.com/syncthing/syncthing/lib/model/rwfolder.go
+++ b/src/github.com/syncthing/syncthing/lib/model/rwfolder.go
@@ -1029,14 +1029,6 @@
 		blocksSize = file.Size()
 	}
 
-	if p.checkFreeSpace {
-		if free, err := osutil.DiskFreeBytes(p.dir); err == nil && free < blocksSize {
-			l.Warnf(`Folder "%s": insufficient disk space in %s for %s: have %.2f MiB, need %.2f MiB`, p.folder, p.dir, file.Name, float64(free)/1024/1024, float64(blocksSize)/1024/1024)
-			p.newError(file.Name, errors.New("insufficient space"))
-			return
-		}
-	}
-
 	events.Default.Log(events.ItemStarted, map[string]string{
 		"folder": p.folder,
 		"item":   file.Name,
--- a/src/github.com/syncthing/syncthing/lib/model/model.go
+++ b/src/github.com/syncthing/syncthing/lib/model/model.go
@@ -1777,12 +1777,6 @@
 		return errors.New("folder does not exist")
 	}
 
-	if minFree := m.cfg.Options().MinHomeDiskFreePct; minFree > 0 {
-		if free, err := osutil.DiskFreePercentage(m.cfg.ConfigPath()); err == nil && free < minFree {
-			return errors.New("home disk has insufficient free space")
-		}
-	}
-
 	fi, err := os.Stat(folder.Path())
 
 	v, ok := m.CurrentLocalVersion(id)
@@ -1800,16 +1794,6 @@
 		case !folder.HasMarker():
 			err = errors.New("folder marker missing")
 
-		case !folder.ReadOnly:
-			// Check for free space, if it isn't a master folder. We aren't
-			// going to change the contents of master folders, so we don't
-			// care about the amount of free space there.
-			diskFreeP, errDfp := osutil.DiskFreePercentage(folder.Path())
-			if errDfp == nil && diskFreeP < folder.MinDiskFreePct {
-				diskFreeBytes, _ := osutil.DiskFreeBytes(folder.Path())
-				str := fmt.Sprintf("insufficient free space (%d MiB, %.2f%%)", diskFreeBytes/1024/1024, diskFreeP)
-				err = errors.New(str)
-			}
 		}
 	} else {
 		// It's a blank folder, so this may the first time we're looking at
