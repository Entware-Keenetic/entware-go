gccgo compiled binaries do not save changed configuartion in many cases,
they end up web connection with "WARNING: API: use of closed network connection".
Strange but this bug is not always reproducable - sometimes everything works as expexted!
The patch forces saving config and reports user to manually restart syncthing.
--- a/src/github.com/syncthing/syncthing/cmd/syncthing/gui.go
+++ b/src/github.com/syncthing/syncthing/cmd/syncthing/gui.go
@@ -309,33 +309,6 @@
 }
 
 func (s *apiService) CommitConfiguration(from, to config.Configuration) bool {
-	if to.GUI == from.GUI {
-		return true
-	}
-
-	// Order here is important. We must close the listener to stop Serve(). We
-	// must create a new listener before Serve() starts again. We can't create
-	// a new listener on the same port before the previous listener is closed.
-	// To assist in this little dance the Serve() method will wait for a
-	// signal on the configChanged channel after the listener has closed.
-
-	s.listenerMut.Lock()
-	defer s.listenerMut.Unlock()
-
-	s.listener.Close()
-
-	var err error
-	s.listener, err = s.getListener(to.GUI)
-	if err != nil {
-		// Ideally this should be a verification error, but we check it by
-		// creating a new listener which requires shutting down the previous
-		// one first, which is too destructive for the VerifyConfiguration
-		// method.
-		return false
-	}
-
-	s.configChanged <- struct{}{}
-
 	return true
 }
 
--- a/src/github.com/syncthing/syncthing/lib/connections/connections.go
+++ b/src/github.com/syncthing/syncthing/lib/connections/connections.go
@@ -450,24 +450,7 @@
 }
 
 func (s *connectionService) CommitConfiguration(from, to config.Configuration) bool {
-	s.mut.Lock()
-	s.relaysEnabled = to.Options.RelaysEnabled
-	s.mut.Unlock()
-
-	// We require a restart if a device as been removed.
-
-	newDevices := make(map[protocol.DeviceID]bool, len(to.Devices))
-	for _, dev := range to.Devices {
-		newDevices[dev.DeviceID] = true
-	}
-
-	for _, dev := range from.Devices {
-		if !newDevices[dev.DeviceID] {
-			return false
-		}
-	}
-
-	return true
+	return false
 }
 
 // serviceFunc wraps a function to create a suture.Service without stop
